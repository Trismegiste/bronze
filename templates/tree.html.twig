{% extends "base.html.twig" %}

{% block main %}
    <div x-data="familyTree">
        <template x-for="(node, idx) in families">
            <div class="pure-g" x-html="renderLevel(node, idx)"></li>
        </template>
        <button x-on:click="update" ond>Update</button>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('alpine:init', () => {
            Alpine.data('familyTree', () => ({
                    families: [
                        {
                            name: 'Lupe',
                            children: [
                                {
                                    name: 'Bertha',
                                    children: [
                                        {
                                            name: 'Hollywood',
                                        },
                                        {
                                            name: 'Yolo',
                                        },
                                    ],
                                },
                                {
                                    name: 'Pinnick',
                                    children: [
                                        {
                                            name: 'Andy',
                                            children: [
                                                {
                                                    name: 'Arffff'
                                                }
                                            ]
                                        },
                                        {
                                            name: 'Rita',
                                            children: [
                                                {
                                                    name: 'Rebel'
                                                }
                                            ]
                                        },
                                    ]
                                },
                            ]
                        },
                        {
                            name: 'Smitty',
                            children: [
                                {
                                    name: 'Vito',
                                    children: []
                                },
                                {
                                    name: 'Danny',
                                    children: []
                                },
                                {
                                    name: 'Penguin',
                                    children: []
                                },
                            ],
                        }
                    ],

                    draggedNodeIdx: null,

                    renderLevel(obj, keyIdx) {
                        let html = `<div class="pure-u-1-12"></div>
                                    <div class="pure-u-11-12" draggable="true" x-on:dragstart="dragStart" x-on:dragend="dragEnd">
                                        <span x-text="node.name"></span>`

                        if (obj.children && obj.children.length) {
                            html += `<template x-for="(node, idx) in node.children">
                                        <div class="pure-g" x-html="renderLevel(node, idx)"></div>
                                    </template>`
                        }

                        html += '</div>'

                        html += `<div class="pure-u-1-12"></div>
                                <div class="pure-u-11-12 sortingzone"
                                    data-index="${keyIdx}"
                                    x-on:dragenter="enterSortingZone"
                                    x-on:dragleave="leaveSortingZone"
                                    x-on:dragover="dragOverNothing"
                                    x-on:drop="dropSortingZone">
                                </div>`

                        return html
                    },

                    enterSortingZone(event) {
                        if (event.target.classList.contains("sortingzone")) {
                            event.target.classList.add("focusedzone")
                        }
                    },

                    leaveSortingZone(event) {
                        if (event.target.classList.contains("sortingzone")) {
                            event.target.classList.remove("focusedzone")
                        }
                    },

                    update() {
                        this.families.push({name: 'toto', children: []})
                        console.log(this.getNode(this.families, [1, 0]).name)
                    },

                    dragOverNothing(event) {
                        // prevent default to allow drop
                        event.preventDefault()
                    },

                    dropSortingZone(event) {
                        event.preventDefault()
                        let accumul = [event.target.dataset.index]
                        this.backtrackParent(event.target, accumul)
                        console.log('source', this.getNode(this.families, this.draggedNodeIdx).name)
                        console.log('target after', this.getNode(this.families, accumul).name)
                    },

                    backtrackParent(elem, indices) {
                        let parentDropZone = elem.parentElement.parentElement.nextElementSibling
                        if (parentDropZone !== null) {
                            parentDropZone = parentDropZone.nextElementSibling
                            indices.unshift(parentDropZone.dataset.index)
                            this.backtrackParent(parentDropZone, indices)
                        }
                    },

                    dragStart(event) {
                        let dropZone = event.target.nextElementSibling.nextElementSibling
                        let accumul = [dropZone.dataset.index]
                        this.backtrackParent(dropZone, accumul)
                        this.draggedNodeIdx = accumul
                    },

                    dragEnd(event) {
                        this.draggedNodeIdx = null
                    },

                    getNode(tree, pathIndices) {
                        if (pathIndices.length === 1) {
                            return tree[pathIndices[0]]
                        }

                        const key = pathIndices.shift()
                        return this.getNode(tree[key].children, pathIndices)
                    }
                }))
        })
    </script>
{% endblock %}

{% block stylesheets %}
    <style>
        div {
            background-color: hsl(0deg 50% 50% / 20%)
        }
        .sortingzone {
            height: 0.5em;
        }
        .focusedzone {
            background-color: green;
        }
    </style>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/pure-min.css" integrity="sha384-X38yfunGUhNzHpBaEBsWLO+A0HDYOQi8ufWDkZ0k9e0eXz/tH3II7uKZ9msv++Ls" crossorigin="anonymous">
{% endblock %}