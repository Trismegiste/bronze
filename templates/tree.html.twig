{% extends "base.html.twig" %}

{% block main %}
    <div x-data="treeUI">
        <div class="pure-g" x-html="renderChildNodes(null)">
        </div>
        <button x-on:click="update" ond>Update</button>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('alpine:init', () => {
            Alpine.data('treeUI', () => ({
                    tree: [
                        {
                            pk: 1,
                            name: 'Lupe',
                            parent: null
                        },
                        {
                            pk: 2,
                            name: 'Bertha',
                            parent: 1
                        },
                        {
                            pk: 3,
                            name: 'Hollywood',
                            parent: 1
                        },
                        {
                            pk: 4,
                            name: 'Yolo',
                            parent: 2
                        },
                        {
                            pk: 5,
                            name: 'Arf',
                            parent: 2
                        },
                    ],

                    draggedNode: null,

                    renderChildNodes(fk) {
                        let html = `<div class="pure-u-1-12"></div>
                                    <div class="pure-u-11-12" draggable="true" x-on:dragstart="dragStart" x-on:dragend="dragEnd">
                                        <template x-for="node in tree">
                                            <template x-if="node.pk === ${fk}">
                                                <span x-text="node.name"></span>
                                            </template>
                                        </template>`

                        html += `<template x-for="node in tree">
                                    <template x-if="node.parent === ${fk}">
                                        <div class="pure-g" x-html="renderChildNodes(node.pk)"></div>
                                    </template>
                                </template>`

                        html += '</div>'

                        html += `<div class="pure-u-1-12"></div>
                                <div class="pure-u-11-12 sortingzone"
                                    data-index="${fk}"
                                    x-on:dragenter="enterSortingZone"
                                    x-on:dragleave="leaveSortingZone"
                                    x-on:dragover="dragOverNothing"
                                    x-on:drop="dropSortingZone">
                                </div>`

                        return html
                    },

                    enterSortingZone(event) {
                        if (event.target.classList.contains("sortingzone")) {
                            event.target.classList.add("focusedzone")
                        }
                    },

                    leaveSortingZone(event) {
                        if (event.target.classList.contains("sortingzone")) {
                            event.target.classList.remove("focusedzone")
                        }
                    },

                    update() {
                        this.families.push({name: 'toto', children: []})
                        console.log(this.getNode([1, 0]).name)
                    },

                    dragOverNothing(event) {
                        // prevent default to allow drop
                        event.preventDefault()
                    },

                    dropSortingZone(event) {
                        event.preventDefault()
                        console.log(this.draggedNode.name)
                        let sibling = this.getNode(event.target.dataset.index)
                        console.log(sibling.parent)
                        this.draggedNode.parent = sibling.parent
                    },

                    backtrackParent(elem, indices) {
                        let parentDropZone = elem.parentElement.parentElement.nextElementSibling
                        if (parentDropZone !== null) {
                            parentDropZone = parentDropZone.nextElementSibling
                            indices.unshift(parentDropZone.dataset.index)
                            this.backtrackParent(parentDropZone, indices)
                        }
                    },

                    dragStart(event) {
                        let dropZone = event.target.nextElementSibling.nextElementSibling
                        this.draggedNode = this.getNode(dropZone.dataset.index)
                    },

                    dragEnd(event) {
                        this.draggedNode = null
                    },

                    getNode(pk) {
                        for (let node of this.tree) {
                            if (node.pk == pk) {
                                return node
                            }
                        }
                        throw new Error(`Pk ${pk} does not exist`)
                    }
                }))
        })
    </script>
{% endblock %}

{% block stylesheets %}
    <style>
        div {
            background-color: hsl(0deg 50% 50% / 20%)
        }
        .sortingzone {
            height: 0.5em;
        }
        .focusedzone {
            background-color: green;
        }
    </style>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/pure-min.css" integrity="sha384-X38yfunGUhNzHpBaEBsWLO+A0HDYOQi8ufWDkZ0k9e0eXz/tH3II7uKZ9msv++Ls" crossorigin="anonymous">
{% endblock %}